┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
slurmstepd: error: poll(): Bad address
/var/spool/slurmd/job60158333/slurm_script: line 28: 22690 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=0
/var/spool/slurmd/job60158333/slurm_script: line 28: 22789 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=1000
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
/var/spool/slurmd/job60158333/slurm_script: line 28: 23513 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=0
/var/spool/slurmd/job60158333/slurm_script: line 28: 23653 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=1000
/var/spool/slurmd/job60158333/slurm_script: line 28: 23763 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=0
/var/spool/slurmd/job60158333/slurm_script: line 28: 23869 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=1000
/var/spool/slurmd/job60158333/slurm_script: line 28: 24008 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=0
/var/spool/slurmd/job60158333/slurm_script: line 28: 24105 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=1000
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
/var/spool/slurmd/job60158333/slurm_script: line 28: 24998 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=0
/var/spool/slurmd/job60158333/slurm_script: line 28: 25101 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${smallInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/small_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=1000
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
/var/spool/slurmd/job60158333/slurm_script: line 47: 28122 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${mediumInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/medium_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=0
/var/spool/slurmd/job60158333/slurm_script: line 47: 28226 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${mediumInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/medium_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=1000
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: CUDA runtime not found
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] functional
    @ ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:24 [inlined]
  [3] task_local_state!()
    @ CUDA ~/.julia/packages/CUDA/XUdwt/lib/cudadrv/state.jl:77
  [4] #alloc#1058
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:0 [inlined]
  [5] alloc
    @ ~/.julia/packages/CUDA/XUdwt/src/pool.jl:441 [inlined]
  [6] CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}(::UndefInitializer, dims::Tuple{Int64})
    @ CUDA ~/.julia/packages/CUDA/XUdwt/src/array.jl:74
  [7] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:147 [inlined]
  [8] CuArray
    @ ~/.julia/packages/CUDA/XUdwt/src/array.jl:168 [inlined]
  [9] scaledqp_cpu_to_gpu(scaled_problem::cuPDLP.ScaledQpProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/cpu_to_gpu.jl:69
 [10] optimize(params::cuPDLP.PdhgParameters, original_problem::cuPDLP.QuadraticProgrammingProblem)
    @ cuPDLP /nfs/home2/nacevedo/RA/cuPDLP.jl/src/primal_dual_hybrid_gradient_gpu.jl:486
 [11] warm_up
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:123 [inlined]
 [12] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:254
 [13] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
    @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [14] top-level scope
    @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:568
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
┌ Error: CUDA.jl could not find an appropriate CUDA runtime to use.
│ 
│ This can have several reasons:
│ * you are using an unsupported platform: this version of CUDA.jl
│   only supports Linux (x86_64, aarch64, ppc64le) and Windows (x86_64),
│   while your platform was identified as x86_64-linux-gnu-libgfortran5-cxx11-cuda+none-julia_version+1.10.5-cuda_local+false;
│ * you precompiled CUDA.jl in an environment where the CUDA driver
│   was not available (i.e., a container, or an HPC login node).
│   in that case, you need to specify which CUDA version to use
│   by calling `CUDA.set_runtime_version!`;
│ * you requested use of a local CUDA toolkit, but not all
│   required components were discovered. try running with
│   JULIA_DEBUG=all in your environment for more details.
│ 
│ For more details, refer to the CUDA.jl documentation at
│ https://cuda.juliagpu.org/stable/installation/overview/
└ @ CUDA ~/.julia/packages/CUDA/XUdwt/src/initialization.jl:82
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
 [1] Array
   @ ./boot.jl:479 [inlined]
 [2] Array
   @ ./boot.jl:487 [inlined]
 [3] zeros
   @ ./array.jl:636 [inlined]
 [4] Matrix{Float64}(s::UniformScaling{Bool}, dims::Tuple{Int64, Int64})
   @ LinearAlgebra /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:407
 [5] Array
   @ /nfs/home2/nacevedo/julia-1.10.5/share/julia/stdlib/v1.10/LinearAlgebra/src/uniformscaling.jl:414 [inlined]
 [6] LP_to_quasi_standard_form(lp::cuPDLP.QuadraticProgrammingProblem)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:203
 [7] call_pdlp(lp::cuPDLP.QuadraticProgrammingProblem, tolerance::Float64, time_sec_limit::Float64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:248
 [8] iterative_refinement(instance_path::String, initial_tol::Float64, objective_tol::Float64, time_sec_limit::Float64, max_iter::Int64)
   @ Main /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:346
 [9] top-level scope
   @ /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:570
in expression starting at /nfs/home2/nacevedo/RA/cuPDLP.jl/scripts/iterative_refinement.jl:567
/var/spool/slurmd/job60158333/slurm_script: line 47: 29027 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${mediumInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/medium_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=0
/var/spool/slurmd/job60158333/slurm_script: line 47: 29136 Killed                  julia --project scripts/iterative_refinement.jl --instance_path="/nfs/sloanlab007/projects/pdopt_proj/instances/lp/miplib2017/${mediumInstances[i-1]}.mps.gz" --output_directory="./output/MIPLIB_batch/medium_instances" --iter_tolerance=1e-3 --obj_tolerance=1e-8 --time_sec_limit=3600 --max_iter=1000
